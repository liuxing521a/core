;:q17:48:59,169 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]
;:≥17:48:59,169 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback-test.xml] at [file:/F:/sources/itas-core/core/build/classes/test/logback-test.xml]
;:å17:48:59,170 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs multiple times on the classpath.
;:¬17:48:59,170 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [jar:file:/F:/sources/itas-core/utils/build/libs/utils-1.1.1.jar!/logback-test.xml]
;:∂17:48:59,170 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/F:/sources/itas-core/core/build/resources/main/logback-test.xml]
;:¥17:48:59,170 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/F:/sources/itas-core/core/build/classes/test/logback-test.xml]
;:¥17:48:59,170 |-WARN in ch.qos.logback.classic.LoggerContext[default] - Resource [logback-test.xml] occurs at [file:/F:/sources/itas-core/core/build/classes/main/logback-test.xml]
;:j17:48:59,348 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set
;:ñ17:48:59,356 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
;:f17:48:59,363 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]
;:ñ17:48:59,427 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
;:i17:48:59,427 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [log-trace]
;:ñ17:48:59,433 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
;:i17:48:59,433 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [log-debug]
;:ñ17:48:59,435 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
;:h17:48:59,435 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [log-info]
;:ñ17:48:59,438 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]
;:i17:48:59,438 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [log-error]
;:Ä17:48:59,440 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.jolbox.bonecp] to TRACE
;:Ö17:48:59,440 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting additivity of logger [com.jolbox.bonecp] to false
;:è17:48:59,440 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [log-debug] to Logger[com.jolbox.bonecp]
;:x17:48:59,440 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [log-trace] to TRACE
;:}17:48:59,440 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting additivity of logger [log-trace] to false
;:á17:48:59,440 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [log-trace] to Logger[log-trace]
;:x17:48:59,440 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [log-debug] to DEBUG
;:}17:48:59,440 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting additivity of logger [log-debug] to false
;:á17:48:59,440 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [log-debug] to Logger[log-debug]
;:x17:48:59,440 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [log-error] to ERROR
;:}17:48:59,441 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting additivity of logger [log-error] to false
;:á17:48:59,441 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [log-error] to Logger[log-error]
;:t17:48:59,441 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO
;:17:48:59,441 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to Logger[ROOT]
;:h17:48:59,441 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.
;:ã17:48:59,442 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@102fa3ce - Registering current configuration as safe fallback point
;:
;:ƒ2015-48-18 17:48:59[Test worker][TRACE]: 
CREATE TABLE IF NOT EXISTS `model`(
	`Id` VARCHAR(36) NOT NULL DEFAULT '',
	`name` VARCHAR(36) NOT NULL DEFAULT ''
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
;:Á2015-48-18 17:48:59[Test worker][TRACE]: 
CREATE TABLE IF NOT EXISTS `model`(
	`Id` VARCHAR(36) NOT NULL DEFAULT '',
	`identy` VARCHAR(36) NOT NULL DEFAULT '',
	UNIQUE KEY `identy` (`identy`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
;:„2015-48-18 17:48:59[Test worker][TRACE]: 
CREATE TABLE IF NOT EXISTS `model`(
	`Id` VARCHAR(36) NOT NULL DEFAULT '',
	`address` VARCHAR(36) NOT NULL DEFAULT '',
	KEY `address` (`address`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
;:†2015-48-18 17:48:59[Test worker][TRACE]: protected void doCreate(java.sql.Statement stmt) {stmt.addBatch("CREATE TABLE IF NOT EXISTS `model`(`Id` VARCHAR(36) NOT NULL DEFAULT '',`address` VARCHAR(36) NOT NULL DEFAULT '',KEY `address` (`address`)) ENGINE=MyISAM DEFAULT CHARSET=utf8;");}
;<T2015-48-18 17:48:59[Test worker][TRACE]: 
SELECT `name` FROM `model` WHERE Id = ?;
;=W2015-48-18 17:48:59[Test worker][TRACE]: 
UPDATE `model` SET `name` = ? WHERE Id = ?;
;>T2015-48-18 17:48:59[Test worker][TRACE]: 
INSERT INTO `model` (`name`) VALUES (?);
;?l2015-48-18 17:48:59[Test worker][TRACE]: 
ALTER TABLE `model` ADD `name` VARCHAR(36) NOT NULL DEFAULT '';

;?ã2015-48-18 17:48:59[Test worker][TRACE]: protected void doAlter(java.sql.Statement stmt, java.util.Set columns) throws java.sql.SQLException {
		java.util.Map alterMap = new java.util.HashMap();
		alterMap.put("name", "ALTER TABLE `model` ADD `name` VARCHAR(36) NOT NULL DEFAULT '';");

		java.util.Map.Entry entry;
		java.util.Iterator it = alterMap.entrySet().iterator();
		while (it.hasNext()) {
			entry = it.next();
			if (!columns.contains((String)entry.getKey()))
			stmt.addBatch((String)entry.getValue());
		}
	}
;@M2015-48-18 17:48:59[Test worker][TRACE]: 
DELETE FROM `model` WHERE Id = ?;
BAû2015-48-18 17:48:59[Test worker][TRACE]: 
protected org.itas.core.GameObject clone(java.lang.String oid) {return new org.itas.core.bytecode.TestModel(oid);}
DCö	2015-49-18 17:49:00[Test worker][TRACE]: protected void doAlter(java.sql.Statement stmt, java.util.Set columns) throws java.sql.SQLException {
		java.util.Map alterMap = new java.util.HashMap();
		alterMap.put("test2", "ALTER TABLE `model` ADD `test2` TEXT;");
		alterMap.put("address", "ALTER TABLE `model` ADD `address` VARCHAR(36) NOT NULL DEFAULT '';");
		alterMap.put("identy", "ALTER TABLE `model` ADD `identy` VARCHAR(36) NOT NULL DEFAULT '';");
		alterMap.put("test", "ALTER TABLE `model` ADD `test` TEXT;");
		alterMap.put("createTime", "ALTER TABLE `model` ADD `createTime` TIMESTAMP NOT NULL;");
		alterMap.put("name", "ALTER TABLE `model` ADD `name` VARCHAR(36) NOT NULL DEFAULT '';");
		alterMap.put("updateTime", "ALTER TABLE `model` ADD `updateTime` TIMESTAMP NOT NULL;");
		alterMap.put("Id", "ALTER TABLE `model` ADD `Id` VARCHAR(36) NOT NULL DEFAULT '';");
		alterMap.put("test1", "ALTER TABLE `model` ADD `test1` TEXT;");

		java.util.Map.Entry entry;
		java.util.Iterator it = alterMap.entrySet().iterator();
		while (it.hasNext()) {
			entry = it.next();
			if (!columns.contains((String)entry.getKey()))
			stmt.addBatch((String)entry.getValue());
		}
	}
DCç2015-49-18 17:49:00[Test worker][TRACE]: protected void doCreate(java.sql.Statement stmt) {stmt.addBatch("CREATE TABLE IF NOT EXISTS `model`(`Id` VARCHAR(36) NOT NULL DEFAULT '',`name` VARCHAR(36) NOT NULL DEFAULT '',`identy` VARCHAR(36) NOT NULL DEFAULT '',`address` VARCHAR(36) NOT NULL DEFAULT '',`test` TEXT,`test1` TEXT,`test2` TEXT,`updateTime` TIMESTAMP NOT NULL,`createTime` TIMESTAMP NOT NULL,UNIQUE KEY `identy` (`identy`),KEY `address` (`address`),PRIMARY KEY `Id` (`Id`)) ENGINE=MyISAM DEFAULT CHARSET=utf8;");}
M xxxxxxxxxxxxxxxxxxxxxxxxxxxDNö	2015-49-18 17:49:00[Test worker][TRACE]: protected void doAlter(java.sql.Statement stmt, java.util.Set columns) throws java.sql.SQLException {
		java.util.Map alterMap = new java.util.HashMap();
		alterMap.put("test2", "ALTER TABLE `model` ADD `test2` TEXT;");
		alterMap.put("address", "ALTER TABLE `model` ADD `address` VARCHAR(36) NOT NULL DEFAULT '';");
		alterMap.put("identy", "ALTER TABLE `model` ADD `identy` VARCHAR(36) NOT NULL DEFAULT '';");
		alterMap.put("test", "ALTER TABLE `model` ADD `test` TEXT;");
		alterMap.put("createTime", "ALTER TABLE `model` ADD `createTime` TIMESTAMP NOT NULL;");
		alterMap.put("name", "ALTER TABLE `model` ADD `name` VARCHAR(36) NOT NULL DEFAULT '';");
		alterMap.put("updateTime", "ALTER TABLE `model` ADD `updateTime` TIMESTAMP NOT NULL;");
		alterMap.put("Id", "ALTER TABLE `model` ADD `Id` VARCHAR(36) NOT NULL DEFAULT '';");
		alterMap.put("test1", "ALTER TABLE `model` ADD `test1` TEXT;");

		java.util.Map.Entry entry;
		java.util.Iterator it = alterMap.entrySet().iterator();
		while (it.hasNext()) {
			entry = it.next();
			if (!columns.contains((String)entry.getKey()))
			stmt.addBatch((String)entry.getValue());
		}
	}
DNç2015-49-18 17:49:00[Test worker][TRACE]: protected void doCreate(java.sql.Statement stmt) {stmt.addBatch("CREATE TABLE IF NOT EXISTS `model`(`Id` VARCHAR(36) NOT NULL DEFAULT '',`name` VARCHAR(36) NOT NULL DEFAULT '',`identy` VARCHAR(36) NOT NULL DEFAULT '',`address` VARCHAR(36) NOT NULL DEFAULT '',`test` TEXT,`test1` TEXT,`test2` TEXT,`updateTime` TIMESTAMP NOT NULL,`createTime` TIMESTAMP NOT NULL,UNIQUE KEY `identy` (`identy`),KEY `address` (`address`),PRIMARY KEY `Id` (`Id`)) ENGINE=MyISAM DEFAULT CHARSET=utf8;");}
Blû2015-49-18 17:49:00[Test worker][TRACE]: 
protected org.itas.core.GameObject clone(java.lang.String oid) {return new org.itas.core.bytecode.TestModel(oid);}
;mƒ2015-49-18 17:49:00[Test worker][TRACE]: 
CREATE TABLE IF NOT EXISTS `model`(
	`Id` VARCHAR(36) NOT NULL DEFAULT '',
	`name` VARCHAR(36) NOT NULL DEFAULT ''
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
;mÁ2015-49-18 17:49:00[Test worker][TRACE]: 
CREATE TABLE IF NOT EXISTS `model`(
	`Id` VARCHAR(36) NOT NULL DEFAULT '',
	`identy` VARCHAR(36) NOT NULL DEFAULT '',
	UNIQUE KEY `identy` (`identy`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
;m„2015-49-18 17:49:00[Test worker][TRACE]: 
CREATE TABLE IF NOT EXISTS `model`(
	`Id` VARCHAR(36) NOT NULL DEFAULT '',
	`address` VARCHAR(36) NOT NULL DEFAULT '',
	KEY `address` (`address`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
;m†2015-49-18 17:49:00[Test worker][TRACE]: protected void doCreate(java.sql.Statement stmt) {stmt.addBatch("CREATE TABLE IF NOT EXISTS `model`(`Id` VARCHAR(36) NOT NULL DEFAULT '',`address` VARCHAR(36) NOT NULL DEFAULT '',KEY `address` (`address`)) ENGINE=MyISAM DEFAULT CHARSET=utf8;");}
;nT2015-49-18 17:49:00[Test worker][TRACE]: 
SELECT `name` FROM `model` WHERE Id = ?;
;oW2015-49-18 17:49:00[Test worker][TRACE]: 
UPDATE `model` SET `name` = ? WHERE Id = ?;
;pT2015-49-18 17:49:00[Test worker][TRACE]: 
INSERT INTO `model` (`name`) VALUES (?);
;ql2015-49-18 17:49:00[Test worker][TRACE]: 
ALTER TABLE `model` ADD `name` VARCHAR(36) NOT NULL DEFAULT '';

;qã2015-49-18 17:49:00[Test worker][TRACE]: protected void doAlter(java.sql.Statement stmt, java.util.Set columns) throws java.sql.SQLException {
		java.util.Map alterMap = new java.util.HashMap();
		alterMap.put("name", "ALTER TABLE `model` ADD `name` VARCHAR(36) NOT NULL DEFAULT '';");

		java.util.Map.Entry entry;
		java.util.Iterator it = alterMap.entrySet().iterator();
		while (it.hasNext()) {
			entry = it.next();
			if (!columns.contains((String)entry.getKey()))
			stmt.addBatch((String)entry.getValue());
		}
	}
;rM2015-49-18 17:49:00[Test worker][TRACE]: 
DELETE FROM `model` WHERE Id = ?;
F xxxxxxxxxxxxxxxxxxxxxxxxxxx